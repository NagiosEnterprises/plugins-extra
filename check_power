import java.io.*;
import java.net.*;

public class Check_Power {

    public static final int OK = 0;
    public static final int WARNING = 1;
    public static final int CRITICAL = 2;
    public static final int UNKNOWN = 3;

    private static final double efficiencyThreshold = 1.5;

    public static void main(String[] args) {
        
        if (args.length != 1) {
            System.err.println("UNKNOWN - Missing power API endpoint URL argument.");
            System.exit(UNKNOWN);
        }

        String powerAPIEndpoint = args[0]; // Get the URL from the command-line argument

        try {
            double powerConsumption = getPowerConsumption(powerAPIEndpoint);
            double pue = calculatePUE();

            String status = checkPowerStatus(powerConsumption);
            String message = String.format("Power consumption: %.2f W | PUE: %.2f", powerConsumption, pue);

            System.out.println(status + " - " + message);
            System.exit(getExitCode(status));

        } catch (Exception e) {
            System.err.println("UNKNOWN - Error: " + e.getMessage());
            System.exit(UNKNOWN);
        }
    }

    private static double getPowerConsumption(String powerAPIEndpoint) throws IOException {
        URL url = new URL(powerAPIEndpoint);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        StringBuilder response = new StringBuilder();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();

       
        String jsonResponse = response.toString();
        System.out.println("Raw JSON Response: " + jsonResponse);

        return parsePowerConsumption(jsonResponse);
    }

    private static double parsePowerConsumption(String jsonResponse) {
    
        try {
            
            int startIdx = jsonResponse.indexOf(":") + 1;
            int endIdx = jsonResponse.indexOf("}");
            String powerValueString = jsonResponse.substring(startIdx, endIdx).trim();
            return Double.parseDouble(powerValueString);
        } catch (Exception e) {
            System.err.println("Error parsing power consumption: " + e.getMessage());
            return 0.0; 
        }
    }

    private static double calculatePUE() {
        double totalFacilityEnergy = 5000;
        double itEnergy = 3000;
        return totalFacilityEnergy / itEnergy;
    }

    private static String checkPowerStatus(double powerConsumption) {
        if (powerConsumption > 1000) {
            return "CRITICAL";
        } else if (powerConsumption > 500) {
            return "WARNING";
        } else {
            return "OK";
        }
    }

    private static int getExitCode(String status) {
        switch (status) {    
            case "OK":
                return OK;
            case "WARNING":
                return WARNING;
            case "CRITICAL":
                return CRITICAL;
            default:
                return UNKNOWN;
        }
    }
}
